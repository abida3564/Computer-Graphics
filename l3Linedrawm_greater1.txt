#include<windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
#include<iostream>
using namespace std;
void display(void)
{
/* clear all pixels */
    glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/
    glColor3f (0.0, 1.0, 1.0);
    glPointSize(10);


// m>1 y+=1 x2=(1/m)+x1;
// m<1 x+=1 y2=m+y1;
        glBegin(GL_POINTS); //Begin quadrilateral coordinates

        int x1 = 2,y1 =3, x2 =5, y2=8;
        int dx,dy;
        double m;
        dx = x2 - x1;
        dy = y2 - y1;
        m = dx/(double)dy;
        glVertex2f(x1,y1);
        double x =x1;
        while(y1<y2){
            y1++;
            x = m + x;
           // cout<<"Y = "<<m<<endl;
            glVertex2f((int)x,y1);
          //  cout<<x1<<" "<<y1<<endl;
        }


        glEnd(); //End quadrilateral coordinates



glFlush ();
}
void init (void)
{
/* select clearing (background) color */
    glClearColor (0.0, 0.0, 0.0, 0.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-10.0, 10.0, -10.0, 10.0, -10.0, 10.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (600, 600);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Demo");
    init ();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
