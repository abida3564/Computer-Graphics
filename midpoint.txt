#include <bits/stdc++.h>
#include <GL/gl.h>
#include <GL/glut.h>

using namespace std;

void display(void)
{
    /* clear all pixels */
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(1.0, 1.0, 1.0);  
    glPointSize(5);  
    glBegin(GL_POINTS);

    // Midpoint Circle Algorithm

    int r = 8;
    int x = 0, y = r;
    int d = 1 - r;

    glVertex3f(0, 0, 0.0f);


    while (x <= y) {
        glVertex3f(x, y, 0.0f);
        glVertex3f(-x, y, 0.0f);
        glVertex3f(x, -y, 0.0f);
        glVertex3f(-x, -y, 0.0f);
        glVertex3f(y, x, 0.0f);
        glVertex3f(-y, x, 0.0f);
        glVertex3f(y, -x, 0.0f);
        glVertex3f(-y, -x, 0.0f);


        if (d < 0) {
            d = d + 2 * x + 3;
        } else {
            d = d + 2 * (x - y) + 5;
            y--;
        }
        x++;
    }

    glEnd();

    glFlush();
}

void init(void)
{
    /* select clearing (background) color */
    glClearColor(0.0, 0.0, 0.0, 0.0); // Set background color to black

    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-20, 20, -20, 20, -10.0, 10.0); // Set orthogonal projection, center (0,0)
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600); // Set window size
    glutInitWindowPosition(100, 100); // Set window position
    glutCreateWindow("Midpoint Circle Algorithm Demo"); // Create window with title
    init(); // Call initialization function
    glutDisplayFunc(display); // Register display function
    glutMainLoop(); // Enter the main loop
    return 0;
}
